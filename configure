#!/usr/bin/perl

use strict;
use warnings;

use FileHandle;
use Cwd;
use FindBin;
use lib "$FindBin::RealBin/scripts";
use command_utils;

# TODO(sonndinh): Most of these work only with a Windows host.
# However, a Linux host can also be used.

# TODO(sonndinh): MPC, ACE, TAO can be downloaded or existing
# paths for them can be passed to the command-line options.
# Command-line options:
# mpc
# ace
# tao
# verbose

my %opts; # = %{parseArgs()};

sub perlOS_to_host {
  return 'win32' if $^O eq 'MSWin32';
  return 'macos' if $^O eq 'darwin';
  return $^O;
}

$opts{'host'} = perlOS_to_host() unless $opts{'host'};
my $is_windows = $opts{'host'} eq 'win32';
my ($slash, $exeext) = $is_windows ? ('\\', '.exe') : ('/', '');

my %specific =
  ($is_windows ?
   ('ext' => 'cmd', 'pathsep' => ';', 'refpre' => '%',
    'refpost' => '%', 'comment' => '::') :
   ('ext' => 'sh', 'pathsep' => ':', 'refpre' => '${',
    'refpost' => '}', 'comment' => '#')
  );

my $curpathRef = $specific{'refpre'} . 'PATH' . $specific{'refpost'};
my %hostEnv = ('build' => 'host', 'PATH' => $curpathRef);
my %targetEnv = ('build' => 'target', 'PATH' => $curpathRef);

sub setSomeEnv {
  my($hashref, $name, $val) = @_;
  $val = Cwd::abs_path($val) if -d $val;
  $val =~ s!/!\\!g if $is_windows;
  $hashref->{$name} = $val;
}

sub setEnv {
  setSomeEnv(\%targetEnv, @_);
}

sub setHostEnv {
  setSomeEnv(\%hostEnv, @_);
}

sub locate_mpc {
  if (defined $opts{'mpc'}) {
    setEnv('MPC_ROOT', $opts{'mpc'});
  }
  elsif ($ENV{'MPC_ROOT'}) {
    setEnv('MPC_ROOT', $ENV{'MPC_ROOT'});
  }
  else {
    if (! -r 'MPC/mwc.pl') {
      my $branch = "ghs-update";
      my $err = git_clone('./MPC', "https://github.com/sonndinh/MPC", branch => $branch);
      die "ERROR: Failed to clone MPC from GitHub, stopped"
        if $err || ! -r 'MPC/mwc.pl';
    }
    setEnv('MPC_ROOT', './MPC');
  }
  setHostEnv('MPC_ROOT', $targetEnv{'MPC_ROOT'});
}

sub run_command {
  my $command = shift;
  return command_utils::run_command(
    $command,
    script_name => 'configure',
    dry_run => $opts{'dry-run'},
    verbose => $opts{'verbose'},
    @_,
  );
}

sub clone_host_and_target {
  my $source_dir = '.';
  locate_mpc();
  print "cloning build tree\n" if $opts{'verbose'};
  if (run_command(
      ["$targetEnv{'MPC_ROOT'}/clone_build_tree.pl", 'host', 'target'],
      chdir => $source_dir)) {
    die("Failed to clone tree");
  }
}

sub write_host_workspace {
  my %buildEnv = %{shift()};
  my $file = "$buildEnv{'ACE_ROOT'}" . '/host_tools.mwc';
  my $MWC = new FileHandle;
  open $MWC, ">$file" or die "ERROR: Can't write to $file, stopped";
  print $MWC <<'EOT';
workspace {
  $(ACE_ROOT)/ace/ace.mpc
  $(ACE_ROOT)/apps/gperf/src
  $(TAO_ROOT)/TAO_IDL
  $(TAO_ROOT)/tao/tao.mpc
}
EOT
  $MWC->close;
  print "Wrote host_tools.mwc in $buildEnv{'ACE_ROOT'}\n" if $opts{'verbose'};
}

sub mergeToEnv {
  my $buildEnv = shift;
  for my $k (keys %{$buildEnv}) {
    next if $k eq 'build';
    if ($buildEnv->{$k} =~
        /^\Q$specific{'refpre'}\E$k\Q$specific{'refpost'}\E(.*)/) {
      if ($1 ne '') {
        $ENV{$k} .= $1;
        print "ENV: Appending $1 to $k\n" if $opts{'verbose'};
      }
    }
    else {
      $ENV{$k} = $buildEnv->{$k};
      print "ENV: Setting $k to $buildEnv->{$k}\n" if $opts{'verbose'};
    }
  }
}

sub write_config_h {
  my %buildEnv = %{shift()};
  my $cfg_file = $buildEnv{'ACE_ROOT'} . '/ace/config.h';
  my $cfg_fh = new FileHandle;
  open $cfg_fh, ">$cfg_file" or die "ERROR: Can't write to $cfg_file, stopped";
  if ($buildEnv{'build'} eq 'host') {
    print $cfg_fh "#include \"ace/config-windows.h\"\n";
  } else {
    print $cfg_fh "#include \"ace/config-integritySCA.h\"\n";
  }
  close $cfg_fh;
  print "Wrote $buildEnv{'ACE_ROOT'}/ace/config.h\n" if $opts{'verbose'};
}

sub generate_workspace {
  my $buildEnv = shift;
  my %savedEnv = %ENV;
  mergeToEnv($buildEnv);

  my @mwc_common_args;
  if ($buildEnv->{'build'} eq 'host') {
    @mwc_common_args = ('-type', 'vs2022', '-static');
  } else {
    @mwc_common_args = ('-type', 'ghs');
  }

  my @mwc = ('perl', "$ENV{ACE_ROOT}/bin/mwc.pl");
  print "Running MPC to generate project files\n";

  if ($buildEnv->{'build'} eq 'host') {
    if (run_command([@mwc, @mwc_common_args, "$buildEnv->{'ACE_ROOT'}/host_tools.mwc"])) {
      die "ERROR: Error from MPC, stopped";
    }
  } else {
    if (run_command([@mwc, @mwc_common_args, "$buildEnv->{'TAO_ROOT'}/TAO_ACE.mwc"])) {
      die "ERROR: Error from MPC, stopped";
    }
  }

  %ENV = %savedEnv;
  print "ENV: restoring previous environment\n" if $opts{'verbose'};
}

sub write_environment {
  my %buildEnv = %{shift()};
  my $dir = shift;
  my $se_file = $dir . '/setenv.' . $specific{'ext'};
  my $se_fh = new FileHandle;
  open $se_fh, ">$se_file" or die "ERROR: Can't write to $se_file, stopped";

  for my $key (sort(keys(%buildEnv))) {
    if ($key ne 'build' && $key ne 'mpctype') {
      my $value = $buildEnv{$key};
      $value =~ s/^"(.*)"$/$1/g;
      if ($is_windows) {
        print $se_fh "set \"$key=$value\"\n";
      } else {
        my $posix_value = $value;
        $posix_value =~ s/"/\\"/g;
        print $se_fh "export $key=\"$posix_value\"\n";
      }
    }
  }

  $se_fh->close;
  print "Wrote $dir/setenv.$specific{'ext'}\n" if $opts{'verbose'};
}

sub configure_build {
  my $buildEnvRef = shift;
  if (-r "$buildEnvRef->{ACE_ROOT}/ace/config.h") {
    print "ACE_ROOT/ace/config.h exists, skipping configuration of ACE+TAO\n";
  } else {
    # TODO(sonndinh): Create default.features, platform_macros here.
    write_config_h($buildEnvRef);
  }
  generate_workspace($buildEnvRef);
  write_environment($buildEnvRef, $buildEnvRef->{'ACE_ROOT'});
}

# Attempt to create host and target directories with symlinks to the
# original source tree. But this apparently doesn't work on Windows.
#clone_host_and_target();
#setHostEnv('ACE_ROOT', 'build/host/ACE');
#setHostEnv('TAO_ROOT', 'build/host/TAO');
#write_host_workspace(\%hostEnv);
#configure_build(\%hostEnv);

sub git_clone {
  my $dest = shift;
  my $url = shift;
  my %args = @_;
  my $branch = $args{branch};
  my $commit = $args{commit};

  print "Cloning git repo $url ", $branch // $commit, "\n";

  my $failed;
  if (defined($commit)) {
    # Git can't directly clone a specific commit. Could use clone and checkout,
    # but can't do a single shallow clone that way.
    my $chdir = ChangeDir->new($dest);
    $failed = run_command(['git', 'init', '--quiet']) ||
      run_command(['git', 'remote', 'add', 'origin', $url]) ||
      run_command(['git', 'fetch', '--quiet', '--depth=1', 'origin', $commit]) ||
      run_command(['git', 'checkout', '--quiet', 'FETCH_HEAD']);
  }
  else {
    my @cmd = ('git', 'clone', '--quiet', '--depth=1', $url, $dest);
    push(@cmd, '--branch', $branch) if (defined($branch));
    $failed = run_command(\@cmd);
  }

  if (!$failed) {
    run_command(['git', '--no-pager', 'log', '-1', '--oneline'], chdir => $dest);
  }
  return $failed;
}

sub create_host_tools_clone {
  my $host_dir = shift;
  if (! -d $host_dir) {
    die "ERROR: Failed to create '$host_dir' directory" if (!mkdir($host_dir));
  }

  my $urlbase = 'https://github.com/sonndinh';
  my $branch = 'ghs-integrity-porting';
  my $err = git_clone("$host_dir/ACE_TAO", "$urlbase/ACE_TAO", branch => $branch);
  die "ERROR: Failed to clone ACE/TAO from GitHub, stopped"
    if $err || ! -r "$host_dir/ACE_TAO/ACE/ace/ACE.h" || ! -r "$host_dir/ACE_TAO/TAO/tao/ORB.h";
}

sub push_env_dir {
  my ($buildEnvRef, $var, $path) = @_;
  if (exists $buildEnvRef->{$var}) {
    $buildEnvRef->{$var} .= $specific{'pathsep'} . $path;
  }
  else {
    $buildEnvRef->{$var} = $path;
  }
}

sub push_path {
  my ($buildEnvRef, $path) = @_;
  push_env_dir($buildEnvRef, 'PATH', $path);
}

sub push_libpath {
  my ($buildEnvRef, $path) = @_;
  # Windows uses PATH for libraries.
  push_env_dir($buildEnvRef, 'PATH', $path);
}

locate_mpc();

# Create another clone and use it to build host tool.
# The original clone is used to build target.
my $host_tools_dir = "host";
if (! -r "$host_tools_dir/ACE_TAO/ACE/ace/ACE.h") {
  create_host_tools_clone($host_tools_dir);
}

setHostEnv('ACE_ROOT', "$host_tools_dir/ACE_TAO/ACE");
setHostEnv('TAO_ROOT', "$host_tools_dir/ACE_TAO/TAO");

print "Cross-compile configuring host\n";

if (! -r "$host_tools_dir/ACE_TAO/ACE/host_tools.mwc") {
  write_host_workspace(\%hostEnv);
}

configure_build(\%hostEnv);

print "Cross-compile configuring target\n";

setEnv('HOST_ACE', "$host_tools_dir/ACE_TAO/ACE");
setEnv('ACE_ROOT', './ACE');
setEnv('TAO_ROOT', './TAO');

push_path(\%targetEnv, $hostEnv{'ACE_ROOT'} . $slash . 'bin');
push_libpath(\%targetEnv, $hostEnv{'ACE_ROOT'} . $slash . 'lib');

configure_build(\%targetEnv);
